<Project>

  <Target Name="BuildTargetingPackIlSrc"
          DependsOnTargets="GetProjectSrc"
          Condition="'@(TargetingPackSrc)' != ''">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Begin $(MSBuildProjectName) -> $(TFMPackTempOutputDir)..." />
    <MakeDir Directories="@(TargetingPackSrc->'$(TFMPackTempOutputDir)%(RecursiveDir)')" />

    <ItemGroup>
      <IndividualFileProject
        Include="$(MSBuildProjectFullPath)"
        Properties="
          IlFile=%(TargetingPackSrc.Identity);
          OutputFile=$(TFMPackTempOutputDir)%(TargetingPackSrc.RecursiveDir)%(TargetingPackSrc.Filename).dll" />
    </ItemGroup>

    <MSBuild
      Projects="@(IndividualFileProject)"
      Targets="BuildIlFile"
      BuildInParallel="true"
      StopOnFirstFailure="true" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] $(MSBuildProjectName) -> $(TFMPackTempOutputDir) DONE" />
  </Target>

  <Target Name="BuildIlFile"
          DependsOnTargets="ResolveIlToolPaths">
    <!--
      Note: Use awk as hack below to not fill up build logs. Ilasm produces warning on validly
      disassembled il src. The awk expression eats just that warning.
    -->
    <Exec
      Command="set -o pipefail;$(IlasmDir)ilasm $(IlFile) -dll -quiet -nologo -output=$(OutputFile) |&amp; awk '!/warning : Method has no body/'"
      IgnoreStandardErrorWarningFormat="true"
      CustomErrorRegularExpression=": error : " />
  </Target>

  <Import Project="$([MSBuild]::GetPathOfFileAbove(Directory.Build.targets, $(MSBuildThisFileDirectory)..))" />

  <Target Name="Build"
          Condition="'$(SkipTargetingPacks)' != 'true'"
          DependsOnTargets="BuildTargetingPackIlSrc" />

</Project>
