<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>

  <PropertyGroup>
    <ILsrcPath>$(RepoRoot)/src/targetPacks/ILsrc/</ILsrcPath>
    <ReferenceAssemblySourcePath>$(RepoRoot)src/referencePackages/src/</ReferenceAssemblySourcePath>
    <TextOnlyProjectsSourcePath>$(RepoRoot)src/textOnlyPackages/</TextOnlyProjectsSourcePath>
    <ArtifactsTFMPackTemp>$(RepoRoot)artifacts/TFMPack/</ArtifactsTFMPackTemp>
    <RestoreIlTooling>true</RestoreIlTooling>
  </PropertyGroup>

  <ItemGroup>
    <TargetingPacksSrc Include="$(ILsrcPath)**/*.il" />
    <ILsrcPathFiles Include="$(ILsrcPath)**/*.*" />
    <ProjFiles Include="$(ILsrcPath)**/*.proj" />
  </ItemGroup>

  <Target Name="BuildTFMDLLStructure"
          Condition="'@(ILsrcPathFiles)' != ''">
    <ItemGroup>
      <StructureFiles Include="@(ILsrcPathFiles)" Exclude="@(TargetingPacksSrc);@(ProjFiles)" />
    </ItemGroup>
    <Message Importance="High" Text="Copy all tfm files." />
    <Copy SourceFiles="@(StructureFiles)" DestinationFiles="@(StructureFiles->'$(ArtifactsTFMPackTemp)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Message Importance="High" Text="Copy all tfm Complete." />
  </Target>

  <Target Name="AssembleTargetPacks"
          Condition="'@(TargetingPacksSrc)' != ''"
          DependsOnTargets="BuildTFMDLLStructure">
    <MSBuild Projects="@(ProjFiles)" BuildInParallel="true" Targets="AssembleTargetPack"/>
  </Target>

  <Target Name="GetTargetingPackSrc">
    <ItemGroup>
      <TargetingPackSrc Include="$(MSBuildProjectDirectory)/**/*.il" />
      <!-- Temporarily move files with 'constraint' token that isn't compatible with current ilasm. -->
      <TargetingPackSrc Remove="$(MSBuildProjectDirectory)/**/System.Data.Common.il" />
      <TargetingPackSrc Remove="$(MSBuildProjectDirectory)/**/System.Reflection.Metadata.il" />
    </ItemGroup>
  </Target>

  <Target Name="AssembleTargetPack"
          Condition="'$(SkipTargetingPacks)' != 'true' "
          DependsOnTargets="
            GetTargetingPackSrc;
            BuildTargetingPackIlSrc" />

  <Target Name="BuildTargetingPackIlSrc"
          Condition="'@(TargetingPackSrc)' != ''">
    <PropertyGroup>
      <ArtifactsTFMPackTemp>$(RepoRoot)artifacts/TFMPack/</ArtifactsTFMPackTemp>
    </PropertyGroup>

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Begin $(MSBuildProjectName) -> $(ArtifactsTFMPackTemp)$(MSBuildProjectName)..." />
    <MakeDir Directories="@(TargetingPackSrc->'$(ArtifactsTFMPackTemp)$(MSBuildProjectName)/%(RecursiveDir)')" />

    <ItemGroup>
      <IndividualFileProject
        Include="$(MSBuildProjectFullPath)"
        Properties="
          IlFile=%(TargetingPackSrc.Identity);
          OutputFile=$(ArtifactsTFMPackTemp)$(MSBuildProjectName)/%(TargetingPackSrc.RecursiveDir)%(TargetingPackSrc.Filename).dll" />
    </ItemGroup>

    <MSBuild
      Projects="@(IndividualFileProject)"
      Targets="BuildIlFile"
      BuildInParallel="false"
      StopOnFirstFailure="true" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] $(MSBuildProjectName) -> $(ArtifactsTFMPackTemp)$(MSBuildProjectName) DONE" />
  </Target>

  <Target Name="BuildIlFile"
          DependsOnTargets="ResolveIlToolPaths">
    <!--
      Note: Use awk as hack below to not fill up build logs. Ilasm produces warning on validly
      disassembled il src. The awk expression eats just that warning.
    -->
    <Exec
      Command="set -o pipefail;$(IlasmDir)ilasm $(IlFile) -dll -quiet -nologo -output=$(OutputFile) |&amp; awk '!/warning : Method has no body/'"
      IgnoreStandardErrorWarningFormat="true"
      CustomErrorRegularExpression=": error : " />
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!--
    Main build for all target packs. Triggers sub-build for each package.
  -->
  <Target Name="Build"
          Condition="'$(SkipTargetingPacks)' != 'true'" >
    <ItemGroup>
      <ILSrcPackageNamePath Include="$([System.IO.Directory]::GetDirectories('$(ILsrcPath)'))" />
      <ILSrcPackageNamePath Name="%(ILSrcPackageNamePath.Filename)%(ILSrcPackageNamePath.Extension)" />

      <ILSrcPackageNameVersionPath
        Include="$([System.IO.Directory]::GetDirectories('%(ILSrcPackageNamePath.Identity)'))"
        Name="%(ILSrcPackageNamePath.Name)" />
      <ILSrcPackageNameVersionPath Version="%(ILSrcPackageNameVersionPath.Filename)%(ILSrcPackageNameVersionPath.Extension)" />

      <ILSrcPackageNameVersionDir
        Include="$([MSBuild]::NormalizeDirectory('%(ILSrcPackageNameVersionPath.Identity)'))"
        Name="%(ILSrcPackageNameVersionPath.Name)"
        Version="%(ILSrcPackageNameVersionPath.Version)"/>

      <!-- <TargetingPacksProjects Include="$(ArtifactsTFMPackTemp)**/*.csproj" /> -->
    </ItemGroup>

    <Error Condition="'@(TargetingPacksProjects)' == ''" Text="ERROR:  No projects to build.  Call 'generate' first." />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm::ss::ff'))] %(TargetingPacksProjects.Identity) Building TargetPacks" />

    <MSBuild Projects="@(TargetingPacksProjects)" Targets="Restore" />

    <MSBuild
      Projects="@(TargetingPacksProjects)"
      Targets="Pack"
      Properties="
        PackageOutputPath=$(ArtifactsRefPkgDir);
        NoWarn=NU5125" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm::ss::ff'))] Done Building TargetPacks" />
  </Target>

</Project>
